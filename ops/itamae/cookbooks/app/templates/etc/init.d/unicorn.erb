#!/bin/sh
### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage unicorn server
# Description:       Start, stop, restart unicorn server for a specific application.
### END INIT INFO
set -e

RAILS_ENV=<%= @app_environment %>
APP_ROOT=<%= @app_root %>
APP_USER=<%= @app_user %>
PID=$APP_ROOT/tmp/pids/unicorn.pid
CMD="bundle exec unicorn -D -N -E $RAILS_ENV -c $APP_ROOT/config/unicorn.rb"

export UNICORN_PROCESSES=<%= @processes %>
export UNICORN_TIMEOUT=<%= @timeout %>

action="$1"
set -u

old_pid="$PID.oldbin"

cd $APP_ROOT || exit 1

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig() {
  test -s $old_pid && kill -$1 `cat $old_pid`
}

run() {
  su $APP_USER -c "$1"
}

case $action in
start)
  sig 0 && echo >&2 "Already running" && exit 0
  run "$CMD"
  ;;
stop)
  sig QUIT && exit 0
  echo >&2 "Not running"
  ;;
force-stop)
  sig TERM && exit 0
  echo >&2 "Not running"
  ;;
restart|reload)
  sig HUP && echo reloaded OK && exit 0
  echo >&2 "Couldn't reload, starting '$CMD' instead"
  run "$CMD"
  ;;
upgrade)
  if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
  then
    n=$UNICORN_TIMEOUT
    while test -s $old_pid && test $n -ge 0
    do
      printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    if test $n -lt 0 && test -s $old_pid
    then
      echo >&2 "$old_pid still exists after $TIMEOUT seconds"
      exit 1
    fi
    exit 0
  fi
  echo >&2 "Couldn't upgrade, starting '$CMD' instead"
  run "$CMD"
  ;;
status)
  sig 0 && echo "unicorn with PID `cat $PID` is running" && exit 0
  echo "unicorn is not running"
  ;;
rotate)
  sig USR1
  ;;
*)
  echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|status|rotate>"
  exit 1
  ;;
esac
